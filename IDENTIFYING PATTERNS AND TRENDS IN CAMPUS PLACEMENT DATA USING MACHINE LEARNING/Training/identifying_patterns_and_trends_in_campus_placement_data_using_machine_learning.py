# -*- coding: utf-8 -*-
"""Identifying patterns and trends in campus placement data using machine learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s5ultgcR3Lbmsv7as1OdaVBEOe0fZ2YY
"""

import numpy as np
import pandas as pd
import os

import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
from sklearn.model_selection import cross_val_score
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import joblib
from sklearn.metrics import accuracy_score

df = pd.read_csv(r"/content/collegePlace.csv")
df.head()

df.info()



def transformationplot(feature):
  plt.figure(figsize=(12,5))
  plt.subplot(1,2,1)
  sns.distplot(feature)

transformationplot(np.log(df['Age']))

import pandas as pd
df = pd.read_csv(r"/content/collegePlace.csv")
df = df.replace(['Male'], [0])
df = df.replace(['Female'], [1])

df = df.replace(['Computer Science','Information Technology','Electronics And Communication','Mechanical','Electrical','Civil'],
                [0,1,2,3,4,5])
df = df.drop(['Hostel'], axis=1)
df

plt.figure(figsize=(12,5))
plt.subplot(121)
sns.distplot(df['CGPA'],color='r')

plt.figure(figsize=(12,5))
plt.subplot(121)
sns.distplot(df['PlacedOrNot'],color='r')

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
df = pd.read_csv(r"/content/collegePlace.csv")
df.head()
plt.figure(figsize= (20,5))
plt.subplot(131)
sns.countplot(x=df['PlacedOrNot'],hue=df['CGPA']) 
plt.show()

"""# New section"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
df = pd.read_csv(r"/content/collegePlace.csv")
plt.figure(figsize= (18,4))
plt.subplot(1,4,1)
sns.countplot(x='Gender',data=df)
plt.show()

import seaborn as sns
 import matplotlib.pyplot as plt
 sns.swarmplot(df['PLACEDORNOT'],df['CGPA'],hue=df['Stream'])

"""# New section"""

sc=StandardScaler()
x_bal=sc.fit_transform(x_bal)
x_bal = pd.DataFrame(x_bal,columns=names)

X = standardized_data
Y = df['PlacedOrNot']
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=2)

classifier = svm.SVC(kernel='linear')
classifier.fit(X_train, Y_train)
SVC(kernel="linear")
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy score of the training data :' , training_data_accuracy)

best_k = {"Regular":0}
best_score = {"Regular":0}
for k in range(3, 50, 2):
  knn_temp = KNeighborsClassifier(n_neighbors=k)
  knn_temp.fit(X_train, Y_train)
  knn_temp_pred = knn_temp.predict(X_test)
  score = metrics.accuracy_score(Y_test, knn_temp_pred) * 100
  if score >= best_score["Regular"] and score < 100:
    best_score["Regular"] =score
    best_k["Regular"] = k
    print("---Results---\nK: {}\nScore: {}".format(best_k, best_score))
    knn = KNeighborsClassifier(n_neighbors=best_k["Regular"])
    knn.fit(X_train, Y_train)
    knn_pred = knn.predict(X_test)
    testd = accuracy_score(knn_pred, Y_test)

import tensorflow as tf
from tensorflow import keras
from keras.models import Sequential
from tensorflow.keras import layers

classifier = sequential()
classifier.add(keras.layers.Dense(6, activation = 'relu', input_dim = 6))
classifier.add(keras.layer.dropout(0.50))
classifier.add(keras.layers.Dense(6, activation = 'relu'))
classifier.add(keras.layer.Dense(1, activation = 'sigmoid'))

loss_1 = tf. keras.losses.BinaryCrossentropy()
classifier.compile(optimizer = 'Adam', loss_1, metrics = ['accuracy'])

classifier.fit(X_train, batch_size = 20, epochs = 100)

import pickle
pickle.dump(knn,open("placement.pkl", 'wb'))
model = pickle.load(open('placement.pkl', 'rb'))